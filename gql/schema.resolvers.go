package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"authz-service/internal/utils"
	"authz-service/pkg/logger"
	"context"
	"fmt"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*HealthResponse, error) {
	return &HealthResponse{Status: "ok"}, nil
}

// Version is the resolver for the version field.
func (r *queryResolver) Version(ctx context.Context) (*VersionResponse, error) {
	return &VersionResponse{Version: r.version}, nil
}

// CheckPermission is the resolver for the checkPermission field.
func (r *queryResolver) CheckPermission(ctx context.Context, input PermissionInput) (*PermissionResponse, error) {
	// Get user ID from context (set by auth middleware)
	userID, exists := ctx.Value("userID").(string)
	if !exists {
		logger.LogError("User ID not found in context during permission check")
		return &PermissionResponse{
			Allowed: false,
			Error:   utils.Ptr("User ID not found in context"),
		}, nil
	}

	// Log the permission check request
	logger.LogInfo("GraphQL permission check request",
		"user_id", userID,
		"action", input.Action,
		"resource_type", input.ResourceType,
		"resource_id", input.ResourceID,
		"tenant", input.TenantID,
	)

	// Check permission
	allowed, err := r.permitService.Check(ctx, userID, input.Action, input.ResourceType, input.ResourceID, "Tenant")
	if err != nil {
		logger.LogError("Failed to check permissions", "error", err)
		return &PermissionResponse{
			Allowed: false,
			Error:   utils.Ptr(fmt.Sprintf("Failed to check permissions: %s", err.Error())),
		}, nil
	}

	// Return result
	return &PermissionResponse{
		Allowed: allowed,
		Error:   utils.Ptr(""),
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
